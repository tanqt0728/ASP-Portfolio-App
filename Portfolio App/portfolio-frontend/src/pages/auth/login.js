import { useState } from "react";
import { useAuth } from "../../contexts/AuthContext";
import { useRouter } from "next/router";
import CryptoJS from "crypto-js";
import React from "react";
import Head from "next/head";
import Layout from "../../components/Layout";
import PageHeading from "../../components/PageHeading";
import Div from "../../components/Div";
import Spacing from "../../components/Spacing";
import Button from "../../components/Button";
import { ToastContainer, toast } from "react-toastify";

export default function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const { login, error: authError } = useAuth(); // Assuming useAuth also provides access to any auth related errors.
  const router = useRouter();
  const [localError, setLocalError] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLocalError("");

    // Hash the password before sending it
    const hashedPassword = CryptoJS.SHA256(password).toString(CryptoJS.enc.Hex);

    // Use the hashed password for login
    try {
      const success = await login(email, hashedPassword);
      if (success) {
        const preAuthRoute = sessionStorage.getItem('preAuthRoute') || '/';

        // Clear the saved route from sessionStorage to avoid unintended redirects in the future
        sessionStorage.removeItem('preAuthRoute');

        router.push(preAuthRoute);
      } else {
        setLocalError(
          authError || "Failed to log in. Please check your credentials."
        );
        toast.error("Failed to log in. Please check your credentials.");
      }
    } catch (error) {
      setLocalError("Failed to log in. Please check your credentials.");
    }
  };

  return (
    <>
      <Head>
        <title>Login - Portfolify </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <PageHeading bgSrc="/images/search_banner.png" />
        <Spacing lg="30" md="20" />
        <Div className="auth-container cs-radius_7">
          <h2>Login</h2>
          {localError && <p className="mb-4 text-red-500">{localError}</p>}
          <form onSubmit={handleSubmit}>
            <Div className="cs-auth_input_container">
              <label htmlFor="email">Email</label>
              <input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Email"
                required
                className="cs-auth_input"
              />
            </Div>
            <Div className="cs-auth_input_container">
              <label htmlFor="password">Password</label>
              <input
                id="password"
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="Password"
                required
                className="cs-auth_input"
              />
            </Div>
            <Div className="cs-auth_button_container">
              <button type="submit" className="cs-btn cs-style1 cs-auth_button">
                Login
              </button>
              <Button
                btnLink="/auth/forgotPassword"
                btnText="Forgot password?"
                variant="cs-auth_link"
              />
            </Div>
          </form>
          <Div className="cs-auth_signup_prompt text-center">
            <p>Don&apos;t have an account?</p>
            <Button
              btnLink="/auth/signup"
              btnText="Sign Up"
              variant="cs-auth_link"
            />
          </Div>
        </Div>
        <ToastContainer />
      </Layout>
    </>
  );
}
